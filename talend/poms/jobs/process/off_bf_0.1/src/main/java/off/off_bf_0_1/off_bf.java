// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package off.off_bf_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.ToBqt;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: off_bf Purpose: mettre Ã  jour les produits bf depuis off<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class off_bf implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "off_bf";
	private final String projectName = "OFF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					off_bf.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(off_bf.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				class BytesLimit65535_tMongoDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.MongoCredential mongoCredential_tMongoDBConnection_1;
				final String decryptedPassword_tMongoDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a2ed1eb546c6c30a");
				mongoCredential_tMongoDBConnection_1 = com.mongodb.MongoCredential
						.createScramSha1Credential("doudou", "admin",
								new String(
										decryptedPassword_tMongoDBConnection_1)
										.toCharArray());
				mongoCredentialList_tMongoDBConnection_1
						.add(mongoCredential_tMongoDBConnection_1);
				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("off");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBInput_1Process(globalMap);

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_OFF_off_bf = new byte[0];
		static byte[] commonByteArray_OFF_off_bf = new byte[0];

		public String externId;

		public String getExternId() {
			return this.externId;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date last_modified;

		public java.util.Date getLast_modified() {
			return this.last_modified;
		}

		public Object quantity;

		public Object getQuantity() {
			return this.quantity;
		}

		public List stores;

		public List getStores() {
			return this.stores;
		}

		public List countries_tags;

		public List getCountries_tags() {
			return this.countries_tags;
		}

		public List categories_tags;

		public List getCategories_tags() {
			return this.categories_tags;
		}

		public List categories_hierarchy;

		public List getCategories_hierarchy() {
			return this.categories_hierarchy;
		}

		public Object nutriments;

		public Object getNutriments() {
			return this.nutriments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OFF_off_bf.length) {
					if (length < 1024 && commonByteArray_OFF_off_bf.length == 0) {
						commonByteArray_OFF_off_bf = new byte[1024];
					} else {
						commonByteArray_OFF_off_bf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OFF_off_bf, 0, length);
				strReturn = new String(commonByteArray_OFF_off_bf, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OFF_off_bf) {

				try {

					int length = 0;

					this.externId = readString(dis);

					this.name = readString(dis);

					this.last_modified = readDate(dis);

					this.quantity = (Object) dis.readObject();

					this.stores = (List) dis.readObject();

					this.countries_tags = (List) dis.readObject();

					this.categories_tags = (List) dis.readObject();

					this.categories_hierarchy = (List) dis.readObject();

					this.nutriments = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.externId, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.last_modified, dos);

				// Object

				dos.writeObject(this.quantity);

				// List

				dos.writeObject(this.stores);

				// List

				dos.writeObject(this.countries_tags);

				// List

				dos.writeObject(this.categories_tags);

				// List

				dos.writeObject(this.categories_hierarchy);

				// Object

				dos.writeObject(this.nutriments);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("externId=" + externId);
			sb.append(",name=" + name);
			sb.append(",last_modified=" + String.valueOf(last_modified));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",stores=" + String.valueOf(stores));
			sb.append(",countries_tags=" + String.valueOf(countries_tags));
			sb.append(",categories_tags=" + String.valueOf(categories_tags));
			sb.append(",categories_hierarchy="
					+ String.valueOf(categories_hierarchy));
			sb.append(",nutriments=" + String.valueOf(nutriments));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rowsStruct implements
			routines.system.IPersistableRow<rowsStruct> {
		final static byte[] commonByteArrayLock_OFF_off_bf = new byte[0];
		static byte[] commonByteArray_OFF_off_bf = new byte[0];

		public String externId;

		public String getExternId() {
			return this.externId;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date last_modified;

		public java.util.Date getLast_modified() {
			return this.last_modified;
		}

		public Object quantity;

		public Object getQuantity() {
			return this.quantity;
		}

		public List stores;

		public List getStores() {
			return this.stores;
		}

		public List countries_tags;

		public List getCountries_tags() {
			return this.countries_tags;
		}

		public List categories_tags;

		public List getCategories_tags() {
			return this.categories_tags;
		}

		public List categories_hierarchy;

		public List getCategories_hierarchy() {
			return this.categories_hierarchy;
		}

		public Object nutriments;

		public Object getNutriments() {
			return this.nutriments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OFF_off_bf.length) {
					if (length < 1024 && commonByteArray_OFF_off_bf.length == 0) {
						commonByteArray_OFF_off_bf = new byte[1024];
					} else {
						commonByteArray_OFF_off_bf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OFF_off_bf, 0, length);
				strReturn = new String(commonByteArray_OFF_off_bf, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OFF_off_bf) {

				try {

					int length = 0;

					this.externId = readString(dis);

					this.name = readString(dis);

					this.last_modified = readDate(dis);

					this.quantity = (Object) dis.readObject();

					this.stores = (List) dis.readObject();

					this.countries_tags = (List) dis.readObject();

					this.categories_tags = (List) dis.readObject();

					this.categories_hierarchy = (List) dis.readObject();

					this.nutriments = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.externId, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.last_modified, dos);

				// Object

				dos.writeObject(this.quantity);

				// List

				dos.writeObject(this.stores);

				// List

				dos.writeObject(this.countries_tags);

				// List

				dos.writeObject(this.categories_tags);

				// List

				dos.writeObject(this.categories_hierarchy);

				// Object

				dos.writeObject(this.nutriments);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("externId=" + externId);
			sb.append(",name=" + name);
			sb.append(",last_modified=" + String.valueOf(last_modified));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",stores=" + String.valueOf(stores));
			sb.append(",countries_tags=" + String.valueOf(countries_tags));
			sb.append(",categories_tags=" + String.valueOf(categories_tags));
			sb.append(",categories_hierarchy="
					+ String.valueOf(categories_hierarchy));
			sb.append(",nutriments=" + String.valueOf(nutriments));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rowsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OFF_off_bf = new byte[0];
		static byte[] commonByteArray_OFF_off_bf = new byte[0];

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String generic_name;

		public String getGeneric_name() {
			return this.generic_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public long last_modified_t;

		public long getLast_modified_t() {
			return this.last_modified_t;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public List stores;

		public List getStores() {
			return this.stores;
		}

		public List countries_tags;

		public List getCountries_tags() {
			return this.countries_tags;
		}

		public List categories_tags;

		public List getCategories_tags() {
			return this.categories_tags;
		}

		public List categories_hierarchy;

		public List getCategories_hierarchy() {
			return this.categories_hierarchy;
		}

		public Object nutriments;

		public Object getNutriments() {
			return this.nutriments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OFF_off_bf.length) {
					if (length < 1024 && commonByteArray_OFF_off_bf.length == 0) {
						commonByteArray_OFF_off_bf = new byte[1024];
					} else {
						commonByteArray_OFF_off_bf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OFF_off_bf, 0, length);
				strReturn = new String(commonByteArray_OFF_off_bf, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OFF_off_bf) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.generic_name = readString(dis);

					this.product_name = readString(dis);

					this.last_modified_t = dis.readLong();

					this.quantity = readString(dis);

					this.stores = (List) dis.readObject();

					this.countries_tags = (List) dis.readObject();

					this.categories_tags = (List) dis.readObject();

					this.categories_hierarchy = (List) dis.readObject();

					this.nutriments = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.generic_name, dos);

				// String

				writeString(this.product_name, dos);

				// long

				dos.writeLong(this.last_modified_t);

				// String

				writeString(this.quantity, dos);

				// List

				dos.writeObject(this.stores);

				// List

				dos.writeObject(this.countries_tags);

				// List

				dos.writeObject(this.categories_tags);

				// List

				dos.writeObject(this.categories_hierarchy);

				// Object

				dos.writeObject(this.nutriments);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",generic_name=" + generic_name);
			sb.append(",product_name=" + product_name);
			sb.append(",last_modified_t=" + String.valueOf(last_modified_t));
			sb.append(",quantity=" + quantity);
			sb.append(",stores=" + String.valueOf(stores));
			sb.append(",countries_tags=" + String.valueOf(countries_tags));
			sb.append(",categories_tags=" + String.valueOf(categories_tags));
			sb.append(",categories_hierarchy="
					+ String.valueOf(categories_hierarchy));
			sb.append(",nutriments=" + String.valueOf(nutriments));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class inputStruct implements
			routines.system.IPersistableRow<inputStruct> {
		final static byte[] commonByteArrayLock_OFF_off_bf = new byte[0];
		static byte[] commonByteArray_OFF_off_bf = new byte[0];

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String generic_name;

		public String getGeneric_name() {
			return this.generic_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public long last_modified_t;

		public long getLast_modified_t() {
			return this.last_modified_t;
		}

		public String quantity;

		public String getQuantity() {
			return this.quantity;
		}

		public List stores;

		public List getStores() {
			return this.stores;
		}

		public List countries_tags;

		public List getCountries_tags() {
			return this.countries_tags;
		}

		public List categories_tags;

		public List getCategories_tags() {
			return this.categories_tags;
		}

		public List categories_hierarchy;

		public List getCategories_hierarchy() {
			return this.categories_hierarchy;
		}

		public Object nutriments;

		public Object getNutriments() {
			return this.nutriments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OFF_off_bf.length) {
					if (length < 1024 && commonByteArray_OFF_off_bf.length == 0) {
						commonByteArray_OFF_off_bf = new byte[1024];
					} else {
						commonByteArray_OFF_off_bf = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_OFF_off_bf, 0, length);
				strReturn = new String(commonByteArray_OFF_off_bf, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OFF_off_bf) {

				try {

					int length = 0;

					this._id = readString(dis);

					this.generic_name = readString(dis);

					this.product_name = readString(dis);

					this.last_modified_t = dis.readLong();

					this.quantity = readString(dis);

					this.stores = (List) dis.readObject();

					this.countries_tags = (List) dis.readObject();

					this.categories_tags = (List) dis.readObject();

					this.categories_hierarchy = (List) dis.readObject();

					this.nutriments = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._id, dos);

				// String

				writeString(this.generic_name, dos);

				// String

				writeString(this.product_name, dos);

				// long

				dos.writeLong(this.last_modified_t);

				// String

				writeString(this.quantity, dos);

				// List

				dos.writeObject(this.stores);

				// List

				dos.writeObject(this.countries_tags);

				// List

				dos.writeObject(this.categories_tags);

				// List

				dos.writeObject(this.categories_hierarchy);

				// Object

				dos.writeObject(this.nutriments);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_id=" + _id);
			sb.append(",generic_name=" + generic_name);
			sb.append(",product_name=" + product_name);
			sb.append(",last_modified_t=" + String.valueOf(last_modified_t));
			sb.append(",quantity=" + quantity);
			sb.append(",stores=" + String.valueOf(stores));
			sb.append(",countries_tags=" + String.valueOf(countries_tags));
			sb.append(",categories_tags=" + String.valueOf(categories_tags));
			sb.append(",categories_hierarchy="
					+ String.valueOf(categories_hierarchy));
			sb.append(",nutriments=" + String.valueOf(nutriments));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(inputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				inputStruct input = new inputStruct();
				row1Struct row1 = new row1Struct();
				rowsStruct rows = new rowsStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tMongoDBOutput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1", false);
				start_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMongoDBOutput_1 = 0;

				class BytesLimit65535_tMongoDBOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBOutput_1().limitLog4jByte();

				int nb_line_tMongoDBOutput_1 = 0;

				class DBObjectUtil_tMongoDBOutput_1 {

					private org.bson.Document object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							org.bson.Document lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							org.bson.Document parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = clone(parenttNode);
							}
							object = lastNode;
						}
					}

					private org.bson.Document clone(org.bson.Document source) {
						org.bson.Document to = new org.bson.Document();
						for (java.util.Map.Entry<String, Object> cur : source
								.entrySet()) {
							to.append(cur.getKey(), cur.getValue());
						}
						return to;
					}

					// Get node(embedded document) by path configuration
					public org.bson.Document getParentNode(String parentNode,
							int index) {
						org.bson.Document document = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								document = (org.bson.Document) document
										.get(objNames[i]);
								if (document == null) {
									document = new org.bson.Document();
									return document;
								}
								if (i == index) {
									break;
								}
							}
							return document;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public org.bson.Document getObject() {
						return this.object;
					}

					public void setObject(org.bson.Document object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_1 updateObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				DBObjectUtil_tMongoDBOutput_1 queryObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				java.util.Map<String, String> pathMap_tMongoDBOutput_1 = new java.util.HashMap<String, String>();
				com.mongodb.MongoClient mongo_tMongoDBOutput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBOutput_1 = null;

				pathMap_tMongoDBOutput_1.put("externId", "");

				pathMap_tMongoDBOutput_1.put("name", "");

				pathMap_tMongoDBOutput_1.put("last_modified", "");

				pathMap_tMongoDBOutput_1.put("quantity", "");

				pathMap_tMongoDBOutput_1.put("stores", "");

				pathMap_tMongoDBOutput_1.put("countries_tags", "");

				pathMap_tMongoDBOutput_1.put("categories_tags", "");

				pathMap_tMongoDBOutput_1.put("categories_hierarchy", "");

				pathMap_tMongoDBOutput_1.put("nutriments", "");

				mongo_tMongoDBOutput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBOutput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				db_tMongoDBOutput_1.getCollection("off2").drop();

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_1 = db_tMongoDBOutput_1
						.getCollection("off2");

				List<com.mongodb.client.model.InsertOneModel<org.bson.Document>> bulkWriteOperation_tMongoDBOutput_1 = new java.util.ArrayList<com.mongodb.client.model.InsertOneModel<org.bson.Document>>();

				int bulkWriteOperationCounter_tMongoDBOutput_1 = 1;
				int bulkWriteOperationSize_tMongoDBOutput_1 = Integer
						.parseInt("1000");

				/**
				 * [tMongoDBOutput_1 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("rows" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_2 = 0;

				class BytesLimit65535_tFilterRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_2().limitLog4jByte();
				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				rowsStruct rows_tmp = new rowsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("input" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_1 = 0;

				class BytesLimit65535_tFilterRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterRow_1().limitLog4jByte();
				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				class BytesLimit65535_tMongoDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				mongo_tMongoDBInput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
						.getCollection("TrunkOff");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_1
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}").matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				org.bson.Document myQuery_tMongoDBInput_1 = org.bson.Document
						.parse("{}");
				com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_1 = coll_tMongoDBInput_1
						.find(myQuery_tMongoDBInput_1).noCursorTimeout(false);

				class DBObjectInputUtil_tMongoDBInput_1 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("_id", "");
				pathMap_tMongoDBInput_1.put("generic_name", "");
				pathMap_tMongoDBInput_1.put("product_name", "");
				pathMap_tMongoDBInput_1.put("last_modified_t", "");
				pathMap_tMongoDBInput_1.put("quantity", "");
				pathMap_tMongoDBInput_1.put("stores", "");
				pathMap_tMongoDBInput_1.put("countries_tags", "");
				pathMap_tMongoDBInput_1.put("categories_tags", "");
				pathMap_tMongoDBInput_1.put("categories_hierarchy", "");
				pathMap_tMongoDBInput_1.put("nutriments", "");

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = fi_tMongoDBInput_1
						.iterator();

				while (cursor_tMongoDBInput_1.hasNext()) {
					org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1
							.next();
					nb_line_tMongoDBInput_1++;
					Object valueObj_tMongoDBInput_1 = null;
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("_id"),
									"_id", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input._id = valueObj_tMongoDBInput_1.toString();
					} else {
						input._id = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(
									pathMap_tMongoDBInput_1.get("generic_name"),
									"generic_name", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.generic_name = valueObj_tMongoDBInput_1
								.toString();
					} else {
						input.generic_name = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(
									pathMap_tMongoDBInput_1.get("product_name"),
									"product_name", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.product_name = valueObj_tMongoDBInput_1
								.toString();
					} else {
						input.product_name = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1
									.get("last_modified_t"), "last_modified_t",
									o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						if (valueObj_tMongoDBInput_1.getClass().equals(
								Double.class)) {
							input.last_modified_t = ParserUtils.parseTo_Double(
									valueObj_tMongoDBInput_1.toString())
									.longValue();
						} else {
							input.last_modified_t = ParserUtils
									.parseTo_long(valueObj_tMongoDBInput_1
											.toString());
						}
					} else {
						input.last_modified_t = 0;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("quantity"),
									"quantity", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.quantity = valueObj_tMongoDBInput_1.toString();
					} else {
						input.quantity = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("stores"),
									"stores", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.stores = ParserUtils
								.parseTo_List(valueObj_tMongoDBInput_1
										.toString());
					} else {
						input.stores = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1
									.get("countries_tags"), "countries_tags",
									o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.countries_tags = ParserUtils
								.parseTo_List(valueObj_tMongoDBInput_1
										.toString());
					} else {
						input.countries_tags = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1
									.get("categories_tags"), "categories_tags",
									o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.categories_tags = ParserUtils
								.parseTo_List(valueObj_tMongoDBInput_1
										.toString());
					} else {
						input.categories_tags = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1
									.get("categories_hierarchy"),
									"categories_hierarchy", o_tMongoDBInput_1);
					if (valueObj_tMongoDBInput_1 != null
							&& valueObj_tMongoDBInput_1.toString().length() > 0) {
						input.categories_hierarchy = ParserUtils
								.parseTo_List(valueObj_tMongoDBInput_1
										.toString());
					} else {
						input.categories_hierarchy = null;
					}
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(
									pathMap_tMongoDBInput_1.get("nutriments"),
									"nutriments", o_tMongoDBInput_1);
					input.nutriments = valueObj_tMongoDBInput_1;

					/**
					 * [tMongoDBInput_1 begin ] stop
					 */

					/**
					 * [tMongoDBInput_1 main ] start
					 */

					currentComponent = "tMongoDBInput_1";

					tos_count_tMongoDBInput_1++;

					/**
					 * [tMongoDBInput_1 main ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_begin ] stop
					 */

					/**
					 * [tFilterRow_1 main ] start
					 */

					currentComponent = "tFilterRow_1";

					// input
					// input

					if (execStat) {
						runStat.updateStatOnConnection("input" + iterateId, 1,
								1);
					}

					row1 = null;
					Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
							"&&");
					ope_tFilterRow_1.matches((input.quantity != null),
							"advanced condition failed");

					if (ope_tFilterRow_1.getMatchFlag()) {
						if (row1 == null) {
							row1 = new row1Struct();
						}
						row1._id = input._id;
						row1.generic_name = input.generic_name;
						row1.product_name = input.product_name;
						row1.last_modified_t = input.last_modified_t;
						row1.quantity = input.quantity;
						row1.stores = input.stores;
						row1.countries_tags = input.countries_tags;
						row1.categories_tags = input.categories_tags;
						row1.categories_hierarchy = input.categories_hierarchy;
						row1.nutriments = input.nutriments;
						nb_line_ok_tFilterRow_1++;
					} else {
						nb_line_reject_tFilterRow_1++;
					}

					nb_line_tFilterRow_1++;

					tos_count_tFilterRow_1++;

					/**
					 * [tFilterRow_1 main ] stop
					 */

					/**
					 * [tFilterRow_1 process_data_begin ] start
					 */

					currentComponent = "tFilterRow_1";

					/**
					 * [tFilterRow_1 process_data_begin ] stop
					 */
					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							rows = null;

							// # Output table : 'rows'
							rows_tmp.externId = row1._id;
							rows_tmp.name = row1.generic_name == null ? row1.product_name == null ? null
									: row1.product_name
									: row1.product_name == null ? row1.generic_name
											: row1.product_name.length() > row1.generic_name
													.length() ? row1.product_name
													: row1.generic_name;
							rows_tmp.last_modified = new Date(
									1000 * row1.last_modified_t);
							rows_tmp.quantity = ToBqt.toBqt(row1.quantity);
							rows_tmp.stores = row1.stores;
							rows_tmp.countries_tags = row1.countries_tags;
							rows_tmp.categories_tags = row1.categories_tags;
							rows_tmp.categories_hierarchy = row1.categories_hierarchy;
							rows_tmp.nutriments = row1.nutriments;
							rows = rows_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "rows"
						if (rows != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							// rows
							// rows

							if (execStat) {
								runStat.updateStatOnConnection("rows"
										+ iterateId, 1, 1);
							}

							row2 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
									"&&");
							ope_tFilterRow_2.matches((rows.quantity != null),
									"advanced condition failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.externId = rows.externId;
								row2.name = rows.name;
								row2.last_modified = rows.last_modified;
								row2.quantity = rows.quantity;
								row2.stores = rows.stores;
								row2.countries_tags = rows.countries_tags;
								row2.categories_tags = rows.categories_tags;
								row2.categories_hierarchy = rows.categories_hierarchy;
								row2.nutriments = rows.nutriments;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMongoDBOutput_1 main ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								try {
									updateObjectUtil_tMongoDBOutput_1
											.setObject(new org.bson.Document());

									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("externId"),
											"externId", row2.externId);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("name"), "name",
											row2.name);
									updateObjectUtil_tMongoDBOutput_1
											.put(pathMap_tMongoDBOutput_1
													.get("last_modified"),
													"last_modified",
													row2.last_modified);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("quantity"),
											"quantity", row2.quantity);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("stores"), "stores",
											row2.stores);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("countries_tags"),
											"countries_tags",
											row2.countries_tags);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("categories_tags"),
											"categories_tags",
											row2.categories_tags);
									updateObjectUtil_tMongoDBOutput_1
											.put(pathMap_tMongoDBOutput_1
													.get("categories_hierarchy"),
													"categories_hierarchy",
													row2.categories_hierarchy);
									updateObjectUtil_tMongoDBOutput_1.put(
											pathMap_tMongoDBOutput_1
													.get("nutriments"),
											"nutriments", row2.nutriments);
									org.bson.Document updateObj_tMongoDBOutput_1 = updateObjectUtil_tMongoDBOutput_1
											.getObject();

									if (bulkWriteOperationCounter_tMongoDBOutput_1 < bulkWriteOperationSize_tMongoDBOutput_1) {
										bulkWriteOperation_tMongoDBOutput_1
												.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(
														updateObj_tMongoDBOutput_1));
										bulkWriteOperationCounter_tMongoDBOutput_1++;
									} else {
										bulkWriteOperation_tMongoDBOutput_1
												.add(new com.mongodb.client.model.InsertOneModel<org.bson.Document>(
														updateObj_tMongoDBOutput_1));
										coll_tMongoDBOutput_1
												.bulkWrite(
														bulkWriteOperation_tMongoDBOutput_1,
														new com.mongodb.client.model.BulkWriteOptions()
																.ordered(false));
										bulkWriteOperationCounter_tMongoDBOutput_1 = 1;
										bulkWriteOperation_tMongoDBOutput_1 = new java.util.ArrayList();
									}

								} catch (Exception e_tMongoDBOutput_1) {

									System.err.println(e_tMongoDBOutput_1
											.getMessage());

								}
								nb_line_tMongoDBOutput_1++;

								tos_count_tMongoDBOutput_1++;

								/**
								 * [tMongoDBOutput_1 main ] stop
								 */

								/**
								 * [tMongoDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								/**
								 * [tMongoDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								/**
								 * [tMongoDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "rows"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tFilterRow_1 process_data_end ] start
					 */

					currentComponent = "tFilterRow_1";

					/**
					 * [tFilterRow_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 end ] start
					 */

					currentComponent = "tMongoDBInput_1";

				}

				globalMap.put("tMongoDBInput_1_NB_LINE",
						nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("input" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("rows" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tMongoDBOutput_1 end ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				// if bulkWriteOperationCounter_tMongoDBOutput_1 == 1 the
				// ulkWriteOperation_tMongoDBOutput_1 is empty, do not execute.
				if (bulkWriteOperationCounter_tMongoDBOutput_1 != 1) {

					coll_tMongoDBOutput_1.bulkWrite(
							bulkWriteOperation_tMongoDBOutput_1,
							new com.mongodb.client.model.BulkWriteOptions()
									.ordered(false));

				}

				globalMap.put("tMongoDBOutput_1_NB_LINE",
						nb_line_tMongoDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMongoDBOutput_1", true);
				end_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMongoDBClose_1Process(globalMap);

				/**
				 * [tMongoDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_1 finally ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				/**
				 * [tMongoDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				class BytesLimit65535_tMongoDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final off_bf off_bfClass = new off_bf();

		int exitCode = off_bfClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = off_bf.class.getClassLoader()
					.getResourceAsStream(
							"off/off_bf_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = off_bf.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMongoDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMongoDBConnection_1) {
			globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", -1);

			e_tMongoDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : off_bf");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 89743 characters generated by Talend Open Studio for Big Data on the 4
 * octobre 2018 14:23:43 CEST
 ************************************************************************************************/
